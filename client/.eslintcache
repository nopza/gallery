[{"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\index.js":"1","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\App.js":"2","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\reducers\\index.js":"3","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\actions\\login.action.js":"4","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\layouts\\Footer.js":"5","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\RegisterPage\\RegisterPage.js":"6","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\LoginPage\\LoginPage.js":"7","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\layouts\\Scroll.js":"8","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\layouts\\Navbar.js":"9","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\layouts\\Navbar2.js":"10","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\HomePage\\HomePage.js":"11","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\GalleryEditPage\\GalleryEditPage.js":"12","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\GalleryCreatePage\\GalleryCreatePage.js":"13","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\GalleryViewPage\\GalleryViewPage.js":"14","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\reducers\\gallery.reducer.js":"15","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\reducers\\login.reducer.js":"16","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\reducers\\register.reducer.js":"17","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\actions\\gallery.action.js":"18","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\actions\\register.action.js":"19","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\utils\\HttpClient.js":"20","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\fragments\\SelectSearch\\SelectSearch.js":"21","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\fragments\\KeywordSearch\\KeywordSearch.js":"22","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\constants\\index.js":"23"},{"size":616,"mtime":1610349434271,"results":"24","hashOfConfig":"25"},{"size":3277,"mtime":1610349645751,"results":"26","hashOfConfig":"25"},{"size":284,"mtime":1609315393903,"results":"27","hashOfConfig":"25"},{"size":2032,"mtime":1609312662015,"results":"28","hashOfConfig":"25"},{"size":437,"mtime":1610349814524,"results":"29","hashOfConfig":"25"},{"size":3734,"mtime":1610349982051,"results":"30","hashOfConfig":"25"},{"size":5594,"mtime":1610349905658,"results":"31","hashOfConfig":"25"},{"size":1614,"mtime":1610333672120,"results":"32","hashOfConfig":"25"},{"size":3988,"mtime":1610332248337,"results":"33","hashOfConfig":"25"},{"size":4951,"mtime":1610332248338,"results":"34","hashOfConfig":"25"},{"size":8031,"mtime":1610336906103,"results":"35","hashOfConfig":"25"},{"size":9819,"mtime":1610342463721,"results":"36","hashOfConfig":"25"},{"size":10039,"mtime":1610350713688,"results":"37","hashOfConfig":"25"},{"size":6926,"mtime":1610336927354,"results":"38","hashOfConfig":"25"},{"size":1810,"mtime":1610072764031,"results":"39","hashOfConfig":"25"},{"size":720,"mtime":1609296878858,"results":"40","hashOfConfig":"25"},{"size":621,"mtime":1609303172878,"results":"41","hashOfConfig":"25"},{"size":5203,"mtime":1610073543807,"results":"42","hashOfConfig":"25"},{"size":1053,"mtime":1609303221365,"results":"43","hashOfConfig":"25"},{"size":1682,"mtime":1609297077521,"results":"44","hashOfConfig":"25"},{"size":1322,"mtime":1610015324013,"results":"45","hashOfConfig":"25"},{"size":1435,"mtime":1610011827990,"results":"46","hashOfConfig":"25"},{"size":2533,"mtime":1610072715283,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1bnnxs4",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\index.js",[],["108","109"],"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\App.js",[],"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\reducers\\index.js",[],"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\actions\\login.action.js",["110"],"import {\r\n  LOGIN_FETCHING,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILED,\r\n  LOGOUT,\r\n  server,\r\n} from \"../constants\";\r\nimport { httpClient } from \"../utils/HttpClient\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport const setLoginStateToFetch = () => ({\r\n  type: LOGIN_FETCHING,\r\n});\r\n\r\nexport const setLoginStateToSuccess = (payload) => ({\r\n  type: LOGIN_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const setLoginStatetoFailed = (payload) => ({\r\n  type: LOGIN_FAILED,\r\n  payload,\r\n});\r\n\r\nexport const setLoginStatetoLogout = () => ({\r\n  type: LOGOUT,\r\n});\r\n\r\nexport const login = (value, history) => {\r\n  return async (dispatch) => {\r\n    dispatch(setLoginStateToFetch());\r\n\r\n    const result = await httpClient.post(server.LOGIN_URL, value);\r\n    if (result.data.result == \"success\") {\r\n      // backup token\r\n      const { token, refreshToken } = result.data;\r\n      localStorage.setItem(server.TOKEN_KEY, token);\r\n      localStorage.setItem(server.REFRESH_TOKEN_KEY, refreshToken);\r\n\r\n      dispatch(setLoginStateToSuccess(\"Login successfully\"));\r\n      window.location.assign(\"/login\");\r\n    } else {\r\n      dispatch(setLoginStatetoFailed(\"Login failed\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  return async (dispatch) => {\r\n    localStorage.removeItem(server.TOKEN_KEY);\r\n    localStorage.removeItem(server.REFRESH_TOKEN_KEY);\r\n    dispatch(setLoginStatetoLogout());\r\n    window.location.assign(\"/login\");\r\n  };\r\n};\r\n\r\nexport const isLoggedIn = () => {\r\n  let token = localStorage.getItem(server.TOKEN_KEY);\r\n  //Check is token exists\r\n  if (token) {\r\n    //Decode token\r\n    var decodedToken = jwt.decode(token, { complete: true });\r\n    //Get current datetime\r\n    var dateNow = new Date();\r\n    //Check is token expired\r\n    if (decodedToken.exp < dateNow.getTime()) {\r\n      //expired User is not logged in\r\n      return false;\r\n    } else {\r\n      //not expire User is logged in\r\n      return true;\r\n    }\r\n    // return !(decodedToken.exp < dateNow.getTime());\r\n  } else {\r\n    //token not exists\r\n    return false;\r\n  }\r\n};\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\layouts\\Footer.js",["111"],"import React, { Component } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  footer: {\r\n    padding: 20,\r\n    textAlign: \"center\",\r\n    background: \"#26241a\",\r\n    marginTop: 20,\r\n    color: \"#f1f1f1\",\r\n  },\r\n}));\r\n\r\nfunction Footer() {\r\n  const classes = useStyles();\r\n\r\n  return <div className={classes.footer}>© 2020 Copyright:Nopza</div>;\r\n}\r\n\r\nexport default Footer;\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\RegisterPage\\RegisterPage.js",[],"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\LoginPage\\LoginPage.js",["112","113","114","115"],"import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { TextField } from \"formik-material-ui\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport * as loginActions from \"./../../../actions/login.action\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { CardActionArea, Container } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n    justifyContent: \"center\",\r\n    marginTop: \"20px\",\r\n    marginBottom: \"92px\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const loginReducer = useSelector(({ loginReducer }) => loginReducer);\r\n\r\n  // useEffect(() => {\r\n  //   loginActions.isLoggedIn() && props.history.push(\"/stock\");\r\n  // }, []);\r\n\r\n  const showForm = ({\r\n    values,\r\n    handleChange,\r\n    handleSubmit,\r\n    setFieldValue,\r\n    isSubmitting,\r\n  }) => {\r\n    return (\r\n      <Form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n        <Field\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          component={TextField}\r\n          fullWidth\r\n          id=\"username\"\r\n          label=\"Username\"\r\n          onChange={handleChange}\r\n          value={values.username}\r\n          name=\"username\"\r\n          type=\"text\"\r\n          disabled={loginReducer.isFetching}\r\n        />\r\n        <Field\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          component={TextField}\r\n          fullWidth\r\n          onChange={handleChange}\r\n          value={values.password}\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          id=\"password\"\r\n          disabled={loginReducer.isFetching}\r\n        />\r\n        {loginReducer.isError && (\r\n          <Alert severity=\"error\" style={{ marginBottom: 8 }}>\r\n            username or password is not correct\r\n          </Alert>\r\n        )}\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.submit}\r\n          disabled={loginReducer.isFetching}\r\n        >\r\n          Sign In\r\n        </Button>\r\n\r\n        {loginReducer.isFetching && (\r\n          <CircularProgress style={{ marginTop: 10 }} />\r\n        )}\r\n        <Grid container justify=\"flex-end\">\r\n          <Link component={RouterLink} to=\"/register\" variant=\"body2\">\r\n            Don't have an account? Register\r\n          </Link>\r\n        </Grid>\r\n      </Form>\r\n      // <Form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n      //   <Field\r\n      //     component={TextField}\r\n      //     variant=\"outlined\"\r\n      //     margin=\"normal\"\r\n      //     required\r\n      //     fullWidth\r\n      //     label=\"Username\"\r\n      //     onChange={handleChange}\r\n      //     value={values.username}\r\n      //   />\r\n      //   <Field\r\n      //     component={TextField}\r\n      //     variant=\"outlined\"\r\n      //     margin=\"normal\"\r\n      //     required\r\n      //     fullWidth\r\n      //     onChange={handleChange}\r\n      //     value={values.password}\r\n      //     name=\"password\"\r\n      //     label=\"Password\"\r\n      //     type=\"password\"\r\n      //   />\r\n\r\n      //   {loginReducer.isError && (\r\n      //     <Alert severity=\"error\" style={{ marginBottom: 8 }}>\r\n      //       Invalid account!\r\n      //     </Alert>\r\n      //   )}\r\n\r\n      //   <Button\r\n      //     type=\"submit\"\r\n      //     fullWidth\r\n      //     variant=\"contained\"\r\n      //     color=\"primary\"\r\n      //     disabled={loginReducer.isFetching}\r\n      //     className={classes.submit}\r\n      //   >\r\n      //     Sign In\r\n      //   </Button>\r\n      //   {loginReducer.isFetching && (\r\n      //     <CircularProgress style={{ marginTop: 10 }} />\r\n      //   )}\r\n      //   <Grid container justify=\"flex-end\">\r\n      //     <Link component={RouterLink} to=\"/register\" variant=\"body2\">\r\n      //       Don't have an account? Register\r\n      //     </Link>\r\n      //   </Grid>\r\n      // </Form>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Card>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            Login\r\n          </Typography>\r\n          <Formik\r\n            validate={(values) => {\r\n              let errors = {};\r\n              if (!values.username) errors.username = \"Enter username\";\r\n              if (!values.password) errors.password = \"Enter password\";\r\n              return errors;\r\n            }}\r\n            initialValues={{ username: \"\", password: \"\" }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n              dispatch(loginActions.login(values, props.history));\r\n            }}\r\n          >\r\n            {(props) => showForm(props)}\r\n          </Formik>\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\layouts\\Scroll.js",[],"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\layouts\\Navbar.js",[],"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\layouts\\Navbar2.js",["116","117","118","119"],"import {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  makeStyles,\r\n  Button,\r\n  IconButton,\r\n  Drawer,\r\n  Link,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport * as loginActions from \"../../actions/login.action\";\r\n\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst headersData = [\r\n  {\r\n    label: \"Create Gallery\",\r\n    href: \"/gallery\",\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  header: {\r\n    paddingRight: \"79px\",\r\n    paddingLeft: \"118px\",\r\n    \"@media (max-width: 900px)\": {\r\n      paddingLeft: 0,\r\n    },\r\n  },\r\n  logo: {\r\n    fontFamily: \"Work Sans, sans-serif\",\r\n    fontWeight: 600,\r\n    color: \"#000000\",\r\n    textAlign: \"left\",\r\n  },\r\n  menuButton: {\r\n    fontFamily: \"Open Sans, sans-serif\",\r\n    fontWeight: 700,\r\n    size: \"18px\",\r\n    marginLeft: \"38px\",\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  drawerContainer: {\r\n    padding: \"20px 30px\",\r\n  },\r\n}));\r\n\r\nfunction Navbar2(props) {\r\n  const classes = useStyles();\r\n\r\n  const { header, logo, menuButton, toolbar, drawerContainer } = useStyles();\r\n\r\n  const [state, setState] = useState({\r\n    mobileView: false,\r\n    drawerOpen: false,\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { mobileView, drawerOpen } = state;\r\n\r\n  useEffect(() => {\r\n    const setResponsiveness = () => {\r\n      return window.innerWidth < 900\r\n        ? setState((prevState) => ({ ...prevState, mobileView: true }))\r\n        : setState((prevState) => ({ ...prevState, mobileView: false }));\r\n    };\r\n\r\n    setResponsiveness();\r\n\r\n    window.addEventListener(\"resize\", () => setResponsiveness());\r\n  }, []);\r\n\r\n  const logout = () => {\r\n    dispatch(loginActions.logout());\r\n  };\r\n\r\n  const displayDesktop = () => {\r\n    return (\r\n      <Toolbar className={toolbar}>\r\n        <Button href=\"/\">{GalleryLogo}</Button>\r\n        <div>{getMenuButtons()}</div>\r\n      </Toolbar>\r\n    );\r\n  };\r\n\r\n  const displayMobile = () => {\r\n    const handleDrawerOpen = () =>\r\n      setState((prevState) => ({ ...prevState, drawerOpen: true }));\r\n    const handleDrawerClose = () =>\r\n      setState((prevState) => ({ ...prevState, drawerOpen: false }));\r\n\r\n    return (\r\n      <Toolbar>\r\n        <IconButton\r\n          style={{ outlineStyle: \"none\" }}\r\n          {...{\r\n            edge: \"start\",\r\n            color: \"inherit\",\r\n            \"aria-label\": \"menu\",\r\n            \"aria-haspopup\": \"true\",\r\n            onClick: handleDrawerOpen,\r\n          }}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n\r\n        <Drawer\r\n          {...{\r\n            anchor: \"left\",\r\n            open: drawerOpen,\r\n            onClose: handleDrawerClose,\r\n          }}\r\n        >\r\n          <div className={drawerContainer}>{getDrawerChoices()}</div>\r\n        </Drawer>\r\n\r\n        <Button href=\"/\">{GalleryLogo}</Button>\r\n      </Toolbar>\r\n    );\r\n  };\r\n\r\n  const getDrawerChoices = () => {\r\n    // return headersData.map(({ label, href }) => {\r\n    //   return (\r\n    //     <Link\r\n    //       {...{\r\n    //         component: RouterLink,\r\n    //         to: href,\r\n    //         color: \"inherit\",\r\n    //         style: { textDecoration: \"none\" },\r\n    //         key: label,\r\n    //       }}\r\n    //     >\r\n    //       <MenuItem>{label}</MenuItem>\r\n    //     </Link>\r\n    //   );\r\n    // });\r\n    return (\r\n      <div className={classes.root}>\r\n        <Button color=\"inherit\" component={RouterLink} to=\"/mygallery\">\r\n          Your Gallery\r\n        </Button>\r\n        <br />\r\n        <Button color=\"inherit\" component={RouterLink} onClick={logout}>\r\n          Logout\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const GalleryLogo = (\r\n    <Typography variant=\"h6\" component=\"h1\" className={logo}>\r\n      Gallery\r\n    </Typography>\r\n  );\r\n\r\n  const getMenuButtons = () => {\r\n    // return headersData.map(({ label, href }) => {\r\n    //   return (\r\n    //     <Button\r\n    //       {...{\r\n    //         key: label,\r\n    //         color: \"inherit\",\r\n    //         to: href,\r\n    //         component: RouterLink,\r\n    //         className: menuButton,\r\n    //       }}\r\n    //     >\r\n    //       {label}\r\n    //     </Button>\r\n    //   );\r\n    // });\r\n    return (\r\n      <div className={classes.root}>\r\n        <Button color=\"inherit\" component={RouterLink} to=\"/mygallery\">\r\n          Your Gallery\r\n        </Button>\r\n        <Button color=\"inherit\" component={RouterLink} onClick={logout}>\r\n          Logout\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <AppBar className={header}>\r\n        {mobileView ? displayMobile() : displayDesktop()}\r\n      </AppBar>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default withRouter(Navbar2);\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\HomePage\\HomePage.js",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { imageUrl } from \"./../../../constants\";\r\nimport * as galleryActions from \"../../../actions/gallery.action\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport SelectSearch from \"../../fragments/SelectSearch/SelectSearch\";\r\nimport KeywordSearch from \"../../fragments/KeywordSearch/KeywordSearch\";\r\n\r\nimport {\r\n  Grid,\r\n  Container,\r\n  Card,\r\n  Typography,\r\n  CardContent,\r\n  CardActionArea,\r\n  CardMedia,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  TextField,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { fade, makeStyles, withStyles } from \"@material-ui/core/styles\";\r\n\r\n//////////////////////////////////////////////////////\r\n\r\nconst BootstrapInput = withStyles((theme) => ({\r\n  root: {\r\n    \"label + &\": {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n  input: {\r\n    borderRadius: 4,\r\n    position: \"relative\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"1px solid #ced4da\",\r\n    fontSize: 16,\r\n    padding: \"10px 26px 10px 12px\",\r\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    // Use the system font instead of the default Roboto font.\r\n    fontFamily: [\r\n      \"-apple-system\",\r\n      \"BlinkMacSystemFont\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(\",\"),\r\n    \"&:focus\": {\r\n      borderRadius: 4,\r\n      borderColor: \"#80bdff\",\r\n      boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\",\r\n    },\r\n  },\r\n}))(InputBase);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    flexGrow: 1,\r\n  },\r\n  star: {\r\n    color: \"red\",\r\n  },\r\n  orderList: {\r\n    overflowX: \"hidden\",\r\n    height: 490,\r\n    flex: 1,\r\n    width: \"100%\",\r\n    maxHeight: 490,\r\n  },\r\n  orderListItem: {\r\n    height: 100,\r\n    maxHeight: 100,\r\n  },\r\n  productContainer: {\r\n    height: \"100%\",\r\n    marginBottom: 20,\r\n  },\r\n  leftLabel: {\r\n    marginLeft: 20,\r\n  },\r\n  rightLabel: {\r\n    marginRight: 20,\r\n  },\r\n\r\n  card: {\r\n    display: \"flex\",\r\n    width: \"100%\",\r\n    background: \"#f1f1f1\",\r\n    \"&:hover\": {\r\n      background: \"#93a1ae\",\r\n    },\r\n  },\r\n  underimg: {\r\n    \"&:hover\": {\r\n      whiteSpace: \"normal\",\r\n    },\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  input: {\r\n    marginLeft: theme.spacing(1),\r\n    flex: 1,\r\n  },\r\n  iconButton: {\r\n    padding: \"20px 0px 0px 0px\",\r\n    outline: \"none !important\",\r\n    display: \"flex\",\r\n  },\r\n  divider: {\r\n    height: 28,\r\n    margin: 4,\r\n  },\r\n  paper: {\r\n    padding: \"2px 4px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: 400,\r\n  },\r\n}));\r\n\r\nexport default (props) => {\r\n  const galleryReducer = useSelector(({ galleryReducer }) => galleryReducer);\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const { resultlist } = galleryReducer;\r\n  const [type, setType] = useState(\"all\");\r\n  const [name, setName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    dispatch(galleryActions.getAllGallerys());\r\n  }, []); // get data when refresh\r\n\r\n  const handleType = (event) => {\r\n    setType(event.target.value);\r\n  };\r\n  const handleKeyword = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(galleryActions.searchGallery(name, type));\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Card style={{ background: \"#edc218\" }}>\r\n        <div style={{ background: \"#26241a\", padding: \"20px 10px\" }}>\r\n          <Typography\r\n            variant=\"h3\"\r\n            style={{ color: \"#ffffff\", fontWeight: 100, fontSize: \"35px\" }}\r\n          >\r\n            GALLERY PAGE\r\n          </Typography>\r\n        </div>\r\n        <div style={{ padding: \"20px 10px\" }}>\r\n          <Card>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={12}\r\n              spacing={3}\r\n              style={{ padding: \"20px 40px\" }}\r\n            >\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel>Select type</InputLabel>\r\n                <Select\r\n                  value={resultlist.type}\r\n                  onChange={handleType}\r\n                  defaultValue=\"all\"\r\n                >\r\n                  <MenuItem value=\"all\">All</MenuItem>\r\n                  <MenuItem value=\"animal\">Animal</MenuItem>\r\n                  <MenuItem value=\"view\">View</MenuItem>\r\n                  <MenuItem value=\"people\">People</MenuItem>\r\n                  <MenuItem value=\"meme\">Meme</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl className={classes.formControl}>\r\n                <TextField\r\n                  className={classes.input}\r\n                  placeholder=\"Search by name\"\r\n                  inputProps={{ \"aria-label\": \"search by name\" }}\r\n                  onChange={handleKeyword}\r\n                  value={resultlist.name}\r\n                  label=\"Name\"\r\n                />\r\n              </FormControl>\r\n\r\n              <IconButton\r\n                className={classes.iconButton}\r\n                type=\"submit\"\r\n                aria-label=\"search\"\r\n                onClick={handleSubmit}\r\n              >\r\n                <SearchIcon />\r\n              </IconButton>\r\n            </Grid>\r\n          </Card>\r\n        </div>\r\n        {/* <SelectSearch values={resultlist.type} />\r\n        <KeywordSearch values={resultlist.name} /> */}\r\n        <Container>\r\n          <Grid container spacing={1} className={classes.productContainer}>\r\n            {/* {console.log(resultlist)} */}\r\n            {resultlist !== null &&\r\n              resultlist.map((item, i) => (\r\n                <Grid key={i} item xs={12} sm={6} md={4} lg={3}>\r\n                  <Card className={classes.card}>\r\n                    <CardActionArea>\r\n                      <CardMedia\r\n                        component=\"img\"\r\n                        alt=\"Contemplative Reptile\"\r\n                        height=\"200\"\r\n                        image={`${imageUrl}/images/${item.image}?${Date.now()}`} //render new image from Date.now\r\n                        title=\"Contemplative Reptile\"\r\n                      />\r\n                      <CardContent>\r\n                        <Typography\r\n                          noWrap\r\n                          gutterBottom\r\n                          className={classes.underimg}\r\n                        >\r\n                          Name: {item.name}\r\n                          <br />\r\n                          Description: {item.detail}\r\n                          <br />\r\n                          post by {item.username}\r\n                        </Typography>\r\n\r\n                        {/* //send Props */}\r\n                        {/* <Button type=\"button\" component={Link} to={`/gallery/edit/${item.gallery_id}`} >\r\n                            Edit\r\n                          </Button> */}\r\n                      </CardContent>\r\n                    </CardActionArea>\r\n                  </Card>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </Container>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\GalleryEditPage\\GalleryEditPage.js",["139","140","141","142","143","144","145","146","147","148","149","150"],"import * as galleryActions from \"./../../../actions/gallery.action\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { imageUrl } from \"./../../../constants\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport Select from \"react-select\";\r\n\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\n\r\nimport { TextField } from \"formik-material-ui\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n// import Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"80%\",\r\n  },\r\n  field: {\r\n    marginTop: 16,\r\n  },\r\n  card: {\r\n    padding: 20,\r\n  },\r\n  button: {\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const galleryReducer = useSelector(({ galleryReducer }) => galleryReducer);\r\n  const [selectedGallery, setSelectedGallery] = useState(null);\r\n  const [type, setType] = useState();\r\n\r\n  const testSchema = Yup.object().shape({\r\n    type: Yup.string().required(\"Please Pick type\"),\r\n    name: Yup.string().required(\"Please Enter Name\"),\r\n    detail: Yup.string().required(\"Please Enter Detail\"),\r\n  });\r\n\r\n  const typeOptions = [\r\n    { value: \"animal\", label: \"animal\" },\r\n    { value: \"view\", label: \"view\" },\r\n    { value: \"people\", label: \"people\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    let id = props.match.params.id; //id from gallerypage\r\n    dispatch(galleryActions.getGalleryById(id));\r\n  }, []);\r\n\r\n  const handleDeleteConfirm = () => {\r\n    console.log(selectedGallery);\r\n    dispatch(galleryActions.deleteGallery(selectedGallery, props.history));\r\n  };\r\n\r\n  const handleTypeChange = (event) => {\r\n    setType(event.target.value);\r\n  };\r\n\r\n  const showForm = ({\r\n    values,\r\n    setFieldValue,\r\n    errors,\r\n    handleChange,\r\n    handleSubmit,\r\n  }) => {\r\n    return (\r\n      <Form>\r\n        <Card className={classes.card}>\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h3\">\r\n              Edit Post\r\n            </Typography>\r\n\r\n            <Field\r\n              className={classes.field}\r\n              fullWidth\r\n              component={() => <h3>Gallery ID# {values.gallery_id}</h3>}\r\n              name=\"gallery_id\"\r\n              type=\"text\"\r\n              label=\"Id\"\r\n            />\r\n            <br />\r\n\r\n            <Field\r\n              className={classes.field}\r\n              fullWidth\r\n              component={TextField}\r\n              name=\"name\"\r\n              type=\"text\"\r\n              label=\"Name\"\r\n            />\r\n            <br />\r\n            <Field\r\n              className={classes.field}\r\n              fullWidth\r\n              component={TextField}\r\n              name=\"detail\"\r\n              type=\"text\"\r\n              label=\"Detail\"\r\n            />\r\n            <br />\r\n            <br />\r\n            {/* <Grid item md={6} xs={12}>\r\n              <Select\r\n                placeholder=\"Type\"\r\n                onChange={(selectedOption) => {\r\n                  // This inline function can now completely be reaplce by handleChange(\"type\")\r\n                  handleChange(\"type\")(selectedOption.value);\r\n                  console.log(selectedOption.value);\r\n                }}\r\n                isSearchable={true}\r\n                options={typeOptions}\r\n                name=\"type\"\r\n                isLoading={false}\r\n                loadingMessage={() => \"Fetching type\"}\r\n                noOptionsMessage={() => \"Type appears here\"}\r\n              />\r\n              <p className=\"MuiFormHelperText-root Mui-error\">{errors.type}</p>\r\n            </Grid> */}\r\n\r\n            <Grid item md={6} xs={12}>\r\n              <Field\r\n                name=\"type\"\r\n                as=\"select\"\r\n                className=\"selectpicker form-control\"\r\n              >\r\n                <option value=\"animal\">Animal</option>\r\n                <option value=\"view\">View</option>\r\n                <option value=\"people\">People</option>\r\n                <option value=\"meme\">Meme</option>\r\n              </Field>\r\n              <ErrorMessage name=\"type\">\r\n                {(msg) => (\r\n                  <div className=\"MuiFormHelperText-root Mui-error\">{msg}</div>\r\n                )}\r\n              </ErrorMessage>\r\n            </Grid>\r\n            <div className={classes.field}>{showPreviewImage(values)}</div>\r\n\r\n            <div className={classes.field}>\r\n              <Button\r\n                variant=\"contained\"\r\n                component=\"label\"\r\n                component=\"label\"\r\n                startIcon={<CloudUploadIcon />}\r\n              >\r\n                Upload image\r\n                <input\r\n                  type=\"file\"\r\n                  onChange={(e) => {\r\n                    e.preventDefault();\r\n                    if (e.target.files[0]) {\r\n                      setFieldValue(\"file\", e.target.files[0]); // for upload\r\n                      setFieldValue(\r\n                        \"file_obj\",\r\n                        URL.createObjectURL(e.target.files[0])\r\n                      ); // for preview image\r\n                    } else {\r\n                      setFieldValue(\"file\", null); //for upload\r\n                      setFieldValue(\"file_obj\", null); //for preview image\r\n                    }\r\n                  }}\r\n                  name=\"image\"\r\n                  click-type=\"type1\"\r\n                  className=\"picupload\"\r\n                  multiple\r\n                  accept=\"image/*\"\r\n                  id=\"files\"\r\n                  style={{ padding: \"20px 0\" }}\r\n                  hidden\r\n                />\r\n              </Button>\r\n              <ErrorMessage name=\"image\">\r\n                {(msg) => (\r\n                  <div className=\"MuiFormHelperText-root Mui-error\">{msg}</div>\r\n                )}\r\n              </ErrorMessage>\r\n            </div>\r\n          </CardContent>\r\n          <CardActions className={classes.button}>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Edit\r\n            </Button>\r\n            <Button\r\n              onClick={\r\n                (setSelectedGallery(values.gallery_id), handleDeleteConfirm) //send gallery id and do handleDeleteConfirm\r\n              }\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              type=\"submit\"\r\n            >\r\n              Delete\r\n            </Button>\r\n            {console.log(values)}\r\n            <Button\r\n              variant=\"contained\"\r\n              component={Link}\r\n              to=\"/mygallery\"\r\n              color=\"default\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Form>\r\n    );\r\n  };\r\n\r\n  const showPreviewImage = (values) => {\r\n    if (values.file_obj) {\r\n      return <img src={values.file_obj} style={{ height: 200 }} />;\r\n    } else if (values.image) {\r\n      return (\r\n        <img\r\n          src={`${imageUrl}/images/${values.image}`}\r\n          style={{ height: 200 }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n      {/* Main content */}\r\n      <div className=\"box-body\" style={{ marginTop: 30 }}>\r\n        <Formik\r\n          validate={(values) => {\r\n            let errors = {};\r\n            // if (imgError == true) errors.image = \"Please Upload Image\";\r\n            if (!values.name) errors.name = \"Enter name\";\r\n            if (!values.detail) errors.detail = \"Enter detail\";\r\n            if (!values.type) errors.type = \"Please pick type\";\r\n            const validImageTypes = [\r\n              \"image/gif\",\r\n              \"image/jpeg\",\r\n              \"image/png\",\r\n              \"image/jpg\",\r\n            ];\r\n            if (!galleryReducer.result.image) {\r\n              if (!values.file) {\r\n                errors.image = \"Invalid Image\";\r\n              }\r\n            }\r\n            if (values.file && !validImageTypes.includes(values.file.type)) {\r\n              errors.image = \"File type not correct\";\r\n            }\r\n\r\n            return errors;\r\n          }}\r\n          validationSchema={testSchema}\r\n          enableReinitialize\r\n          initialValues={\r\n            galleryReducer.result\r\n              ? galleryReducer.result\r\n              : {\r\n                  name: \"loading\",\r\n                  detail: \"loading\",\r\n                  type: \"loading\",\r\n                }\r\n          }\r\n          onSubmit={(values, { setSubmitting }) => {\r\n            let formData = new FormData();\r\n            formData.append(\"gallery_id\", values.gallery_id);\r\n            formData.append(\"name\", values.name);\r\n            formData.append(\"detail\", values.detail);\r\n            if (values.file) {\r\n              formData.append(\"image\", values.file);\r\n            }\r\n            formData.append(\"type\", values.type);\r\n\r\n            dispatch(galleryActions.updateGallery(formData, props.history));\r\n          }}\r\n        >\r\n          {(props) => showForm(props)}\r\n        </Formik>\r\n      </div>\r\n      {/* /.content */}\r\n    </Container>\r\n  );\r\n};\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\GalleryCreatePage\\GalleryCreatePage.js",["151","152","153","154","155","156","157","158"],"import * as galleryActions from \"./../../../actions/gallery.action\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport { TextField } from \"formik-material-ui\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n// import Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"react-select\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"80%\",\r\n  },\r\n  field: {\r\n    marginTop: 16,\r\n  },\r\n  card: {\r\n    padding: 20,\r\n  },\r\n  button: {\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [type, setType] = useState();\r\n  // const [imgError, setImgError] = useState();\r\n\r\n  // const testSchema = Yup.object().shape({\r\n  //   type: Yup.string().required(\"Please Pick type\"),\r\n  //   name: Yup.string().required(\"Please Enter Name\"),\r\n  //   detail: Yup.string().required(\"Please Enter Detail\"),\r\n  //   image: Yup.mixed().required(\"Please Upload Image\"),\r\n  // });\r\n\r\n  const typeOptions = [\r\n    { value: \"animal\", label: \"animal\" },\r\n    { value: \"view\", label: \"view\" },\r\n    { value: \"people\", label: \"people\" },\r\n    { value: \"meme\", label: \"meme\" },\r\n  ];\r\n\r\n  const handleTypeChange = (event) => {\r\n    setType(event.target.value);\r\n  };\r\n\r\n  const showForm = ({\r\n    values,\r\n    setFieldValue,\r\n    errors,\r\n    handleChange,\r\n    handleSubmit,\r\n  }) => {\r\n    return (\r\n      <Form>\r\n        <Card className={classes.card}>\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h3\">\r\n              Create New Post\r\n            </Typography>\r\n\r\n            <Field\r\n              className={classes.field}\r\n              fullWidth\r\n              component={TextField}\r\n              name=\"name\"\r\n              type=\"text\"\r\n              label=\"Name\"\r\n            />\r\n\r\n            <br />\r\n            <Field\r\n              className={classes.field}\r\n              fullWidth\r\n              component={TextField}\r\n              name=\"detail\"\r\n              type=\"text\"\r\n              label=\"Detail\"\r\n            />\r\n\r\n            {/* <FormControl className={classes.formControl}>\r\n              <InputLabel>Type</InputLabel>\r\n              <Select\r\n                name=\"type\"\r\n                value={values.type}\r\n                onChange={handleTypeChange}\r\n                className={classes.formControl}\r\n              >\r\n                <MenuItem value=\"animal\">Animal</MenuItem>\r\n                <MenuItem value=\"view\">View</MenuItem>\r\n                <MenuItem value=\"people\">People</MenuItem>\r\n              </Select>\r\n            </FormControl> */}\r\n            <br />\r\n            <br />\r\n            <Grid item md={6} xs={12}>\r\n              <Select\r\n                placeholder=\"Type\"\r\n                onChange={(selectedOption) => {\r\n                  // This inline function can now completely be reaplce by handleChange(\"type\")\r\n                  handleChange(\"type\")(selectedOption.value);\r\n                  console.log(selectedOption.value);\r\n                }}\r\n                isSearchable={true}\r\n                options={typeOptions}\r\n                name=\"type\"\r\n                isLoading={false}\r\n                loadingMessage={() => \"Fetching type\"}\r\n                noOptionsMessage={() => \"Type appears here\"}\r\n              />\r\n              {/* <p className=\"MuiFormHelperText-root Mui-error\">\r\n                {errors.type ? errors.type : undefined}\r\n              </p> */}\r\n              <ErrorMessage name=\"type\">\r\n                {(msg) => (\r\n                  <div className=\"MuiFormHelperText-root Mui-error\">{msg}</div>\r\n                )}\r\n              </ErrorMessage>\r\n            </Grid>\r\n            <br />\r\n\r\n            <div>{showPreviewImage(values)}</div>\r\n\r\n            <div className={classes.field}>\r\n              <Button\r\n                variant=\"contained\"\r\n                component=\"label\"\r\n                startIcon={<CloudUploadIcon />}\r\n              >\r\n                Upload image\r\n                <input\r\n                  type=\"file\"\r\n                  // Multiple images\r\n                  // onChange={(e) => {\r\n                  //   e.preventDefault();\r\n                  //   if (e.target.files) {\r\n                  //     setFieldValue(\"file\", e.target.files); // for upload\r\n                  //     const file_img = [];\r\n                  //     for (let i = 0; i < e.target.files.length; i++) {\r\n                  //       file_img.push(URL.createObjectURL(e.target.files[i]));\r\n                  //     }\r\n                  //     setFieldValue(\"file_obj\", file_img); // for preview image\r\n                  //   } else {\r\n                  //     setFieldValue(\"file\", null); //for upload\r\n                  //     setFieldValue(\"file_obj\", []); //for preview image\r\n                  //   }\r\n                  // }}\r\n                  onChange={(e) => {\r\n                    e.preventDefault();\r\n                    if (e.target.files[0]) {\r\n                      // setImgError(false);\r\n                      setFieldValue(\"file\", e.target.files[0]); // for upload\r\n                      setFieldValue(\r\n                        \"file_obj\",\r\n                        URL.createObjectURL(e.target.files[0])\r\n                      ); // for preview image\r\n                    } else {\r\n                      // setImgError(true);\r\n                      setFieldValue(\"file\", null); //for upload\r\n                      setFieldValue(\"file_obj\", null); //for preview image\r\n                    }\r\n                  }}\r\n                  name=\"image\"\r\n                  click-type=\"type1\"\r\n                  className=\"picupload\"\r\n                  multiple\r\n                  accept=\"image/*\"\r\n                  id=\"files\"\r\n                  style={{ padding: \"20px 0\" }}\r\n                  hidden\r\n                />\r\n              </Button>\r\n              <ErrorMessage name=\"image\">\r\n                {(msg) => (\r\n                  <div className=\"MuiFormHelperText-root Mui-error\">{msg}</div>\r\n                )}\r\n              </ErrorMessage>\r\n\r\n              {/* <p className=\"MuiFormHelperText-root Mui-error\">{errors.image}</p> */}\r\n            </div>\r\n          </CardContent>\r\n          <CardActions className={classes.button}>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Create\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              component={Link}\r\n              to=\"/mygallery\"\r\n              color=\"default\"\r\n              raised\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Form>\r\n    );\r\n  };\r\n\r\n  const showPreviewImage = (values) => {\r\n    // if (values.file_obj) {\r\n    //   // const file_img = <></>;\r\n    //   // for (let i = 0; i < values.file_obj.length; i++) {\r\n    //   //   file_img += <img src={values.file_obj[i]} style={{ height: 350 }} />;\r\n    //   // }\r\n    //   console.log(values.file_obj);\r\n    //   return (\r\n    //     <>\r\n    //       {values.file_obj.map((item, i) => (\r\n    //         <img src={item} style={{ height: 50 }} />\r\n    //       ))}\r\n    //     </>\r\n    //   );\r\n    // }\r\n\r\n    if (values.file_obj) {\r\n      return <img src={values.file_obj} style={{ height: 200 }} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n      {/* Main content */}\r\n\r\n      <div className=\"box-body\" style={{ marginTop: 30 }}>\r\n        <Formik\r\n          // validationSchema={testSchema}\r\n          validate={(values) => {\r\n            let errors = {};\r\n            // if (imgError == true) errors.image = \"Please Upload Image\";\r\n            if (!values.name) errors.name = \"Enter name\";\r\n            if (!values.detail) errors.detail = \"Enter detail\";\r\n            if (!values.type) errors.type = \"Please pick type\";\r\n            const validImageTypes = [\r\n              \"image/gif\",\r\n              \"image/jpeg\",\r\n              \"image/png\",\r\n              \"image/jpg\",\r\n            ];\r\n            if (!values.file) {\r\n              errors.image = \"Invalid Image\";\r\n            }\r\n            if (values.file && !validImageTypes.includes(values.file.type)) {\r\n              errors.image = \"File type not correct\";\r\n            }\r\n            return errors;\r\n          }}\r\n          initialValues={{ name: \"\", detail: \"\", type: \"\", image: \"\" }}\r\n          onSubmit={(values, { setSubmitting }) => {\r\n            let formData = new FormData();\r\n            formData.append(\"name\", values.name);\r\n            formData.append(\"detail\", values.detail);\r\n            formData.append(\"image\", values.file);\r\n            formData.append(\"type\", values.type);\r\n            // console.log({\r\n            //   fileName: values.file.name,\r\n            //   type: values.file.type,\r\n            //   size: `${values.file.size} bytes`,\r\n            // });\r\n            dispatch(galleryActions.addGallery(formData, props.history));\r\n            setSubmitting(false);\r\n          }}\r\n        >\r\n          {(props) => showForm(props)}\r\n        </Formik>\r\n      </div>\r\n      {/* /.content */}\r\n    </Container>\r\n  );\r\n};\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\pages\\GalleryViewPage\\GalleryViewPage.js",["159","160","161"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { imageUrl } from \"./../../../constants\";\r\nimport * as galleryActions from \"../../../actions/gallery.action\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport {\r\n  Grid,\r\n  Container,\r\n  Card,\r\n  Typography,\r\n  CardContent,\r\n  CardActionArea,\r\n  CardMedia,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n//////////////////////////////////////////////////////\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  star: {\r\n    color: \"red\",\r\n  },\r\n  orderList: {\r\n    overflowX: \"hidden\",\r\n    height: 490,\r\n    flex: 1,\r\n    width: \"100%\",\r\n    maxHeight: 490,\r\n  },\r\n  orderListItem: {\r\n    height: 100,\r\n    maxHeight: 100,\r\n  },\r\n  productContainer: {\r\n    height: \"100%\",\r\n    marginBottom: 20,\r\n  },\r\n  leftLabel: {\r\n    marginLeft: 20,\r\n  },\r\n  rightLabel: {\r\n    marginRight: 20,\r\n  },\r\n  showcard: {\r\n    background: \"#f1f1f1\",\r\n    \"&:hover\": {\r\n      background: \"#93a1ae\",\r\n    },\r\n  },\r\n  card: {\r\n    display: \"block\",\r\n    width: \"100%\",\r\n    background: \"#f1f1f1\",\r\n    \"&:hover\": {\r\n      background: \"#93a1ae\",\r\n    },\r\n  },\r\n  underimg: {\r\n    \"&:hover\": {\r\n      whiteSpace: \"normal\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default (props) => {\r\n  const galleryReducer = useSelector(({ galleryReducer }) => galleryReducer);\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const { resultlist } = galleryReducer;\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [selectedGallery, setSelectedGallery] = useState(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(galleryActions.getGallerys());\r\n  }, []); // get data when refresh\r\n\r\n  const handleDelete = () => {\r\n    dispatch(galleryActions.deleteGalleryAll(selectedGallery.gallery_id));\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const showDialog = () => {\r\n    if (selectedGallery === null) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <Dialog\r\n        open={openDialog}\r\n        keepMounted\r\n        onClose={() => {}}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">\r\n          <img\r\n            src={`${imageUrl}/images/${selectedGallery.image}?${Date.now()}`}\r\n            style={{ width: 300, borderRadius: \"5%\" }}\r\n          />\r\n          <br />\r\n          Confirm to delete the gallery? : {\" \" + selectedGallery.name}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-slide-description\">\r\n            You cannot restore deleted gallery.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={handleDelete}\r\n            color=\"secondary\"\r\n            style={{ outlineStyle: \"none\" }}\r\n          >\r\n            Delete\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={handleClose}\r\n            color=\"default\"\r\n            style={{ outlineStyle: \"none\" }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Card style={{ background: \"#edc218\" }}>\r\n        <div style={{ background: \"#EFF1F4\" }}>\r\n          <Typography\r\n            variant=\"h3\"\r\n            style={{\r\n              padding: \"20px 10px\",\r\n              background: \"#26241a\",\r\n              color: \"#ffffff\",\r\n              fontWeight: 100,\r\n              fontSize: \"35px\",\r\n            }}\r\n          >\r\n            YOUR GALLERY\r\n          </Typography>\r\n        </div>\r\n        <div style={{ padding: \"20px 10px\" }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            component={Link}\r\n            to=\"/gallery/create\"\r\n            style={{ background: \"#26241a\", color: \"#ffffff\" }}\r\n          >\r\n            Create Gallery\r\n          </Button>\r\n        </div>\r\n        <Container>\r\n          <Grid container spacing={1} className={classes.productContainer}>\r\n            {console.log(resultlist)}\r\n            {resultlist !== null &&\r\n              resultlist.map((item, i) => (\r\n                <Grid key={i} item xs={12} sm={6} md={4} lg={3}>\r\n                  <Card className={(classes.showcard, classes.card)}>\r\n                    <div style={{ background: \"#EFF1F4\" }}>\r\n                      <Tooltip title=\"Delete\">\r\n                        <IconButton\r\n                          style={{ outlineStyle: \"none\" }}\r\n                          aria-label=\"delete\"\r\n                          onClick={() => {\r\n                            setSelectedGallery(item);\r\n                            setOpenDialog(true);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"Edit\">\r\n                        <IconButton\r\n                          aria-label=\"edit\"\r\n                          component={Link}\r\n                          to={`/gallery/edit/${item.gallery_id}`}\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </div>\r\n\r\n                    <CardActionArea>\r\n                      <CardMedia\r\n                        component=\"img\"\r\n                        alt=\"Contemplative Reptile\"\r\n                        height=\"200\"\r\n                        image={`${imageUrl}/images/${item.image}?${Date.now()}`} //render new image from Date.now\r\n                        title=\"Contemplative Reptile\"\r\n                      />\r\n                      <CardContent>\r\n                        <Typography\r\n                          noWrap\r\n                          gutterBottom\r\n                          className={classes.underimg}\r\n                        >\r\n                          Name: {item.name}\r\n                          <br />\r\n                          Description: {item.detail}\r\n                          <br />\r\n                          post by {item.username}\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </CardActionArea>\r\n                  </Card>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </Container>\r\n      </Card>\r\n      {showDialog()}\r\n    </Container>\r\n  );\r\n};\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\reducers\\gallery.reducer.js",["162"],"import {\r\n  GALLERY_SUCCESS,\r\n  GALLERY_FETCHING,\r\n  GALLERY_FAILED,\r\n  GALLERY_CLEAR,\r\n  GALLERY_GETLIST_SUCCESS,\r\n  GALLERY_GETLIST_FETCHING,\r\n  GALLERY_GETLIST_FAILED,\r\n  GALLERY_DELETE_SUCCESS,\r\n  GALLERY_DELETE_FETCHING,\r\n  GALLERY_DELETE_FAILED,\r\n} from \"../constants\";\r\n\r\nconst initialState = {\r\n  result: null,\r\n  isFetching: false,\r\n  isError: false,\r\n  // typeSearch: \"\",\r\n  // nameSearch: \"\",\r\n  resultlist: [],\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case GALLERY_FETCHING:\r\n      return { ...state, result: null, isFetching: true, isError: false };\r\n    case GALLERY_SUCCESS:\r\n      return { ...state, result: payload, isFetching: false, isError: false };\r\n    case GALLERY_FAILED:\r\n      return { ...state, result: null, isFetching: false, isError: true };\r\n    case GALLERY_CLEAR:\r\n      return { ...state, result: null, isFetching: false, isError: false };\r\n    case GALLERY_GETLIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        result: null,\r\n        resultlist: payload,\r\n        isFetching: false,\r\n        isError: false,\r\n      };\r\n    case GALLERY_GETLIST_FETCHING:\r\n      return {\r\n        ...state,\r\n        result: null,\r\n        resultlist: [],\r\n        isFetching: true,\r\n        isError: false,\r\n      };\r\n    case GALLERY_GETLIST_FAILED:\r\n      return {\r\n        ...state,\r\n        result: null,\r\n        resultlist: null,\r\n        isFetching: false,\r\n        isError: true,\r\n      };\r\n    case GALLERY_DELETE_FETCHING:\r\n      return { ...state, isFetching: true, isError: false };\r\n    case GALLERY_DELETE_SUCCESS:\r\n      return { ...state, isFetching: false, isError: false };\r\n    case GALLERY_DELETE_FAILED:\r\n      return { ...state, isFetching: false, isError: true };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\reducers\\login.reducer.js",["163"],"import {\r\n  LOGIN_FAILED,\r\n  LOGIN_FETCHING,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT,\r\n} from \"../constants\";\r\n\r\nconst initialState = {\r\n  result: null,\r\n  isFetching: false,\r\n  isError: false,\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case LOGIN_FETCHING:\r\n      return { ...state, isFetching: true, isError: false, result: null };\r\n    case LOGIN_SUCCESS:\r\n      return { ...state, isFetching: false, isError: false, result: payload };\r\n    case LOGIN_FAILED:\r\n      return { ...state, isFetching: false, isError: true, result: payload };\r\n    case LOGOUT:\r\n      return { ...state, isFetching: false, isError: false, result: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\reducers\\register.reducer.js",["164"],"import { REGISTER_FAILED, REGISTER_FETCHING, REGISTER_SUCCESS } from \"../constants\";\r\n\r\nconst initialState = {\r\n  result: null,\r\n  isFetching: false,\r\n  isError: false,\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case REGISTER_FETCHING:\r\n      return { ...state, result: null, isFetching: true, isError: false };\r\n    case REGISTER_SUCCESS:\r\n      return { ...state, result: payload, isFetching: false, isError: false };\r\n    case REGISTER_FAILED:\r\n      return { ...state, result: payload, isFetching: false, isError: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\actions\\gallery.action.js",[],"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\actions\\register.action.js",[],"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\utils\\HttpClient.js",["165","166"],"import axios from \"axios\";\r\nimport join from \"url-join\";\r\nimport {\r\n  server,\r\n  apiUrl,\r\n  NOT_CONNECT_NETWORK,\r\n  NETWORK_CONNECTION_MESSAGE,\r\n} from \"../constants\";\r\n\r\nconst isAbsoluteURLRegex = /^(?:\\w+:)\\/\\//;\r\n\r\naxios.interceptors.request.use(async (config) => {\r\n  if (!isAbsoluteURLRegex.test(config.url)) {\r\n    config.url = join(apiUrl, config.url);\r\n  }\r\n\r\n  const userToken = localStorage.getItem(server.TOKEN_KEY);\r\n  if (userToken) {\r\n    config.headers = { \"x-access-token\": userToken };\r\n  }\r\n  config.timeout = 10000; // 10 Second\r\n  return config;\r\n});\r\n\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    debugger;\r\n    console.log(JSON.stringify(error, undefined, 2));\r\n    if (error.response.status == \"401\") {\r\n      const refreshToken = localStorage.getItem(server.REFRESH_TOKEN_KEY);\r\n      const refreshUrl = `${apiUrl}/${server.REFRESH_TOKEN_URL}`;\r\n      let result = await axios.post(refreshUrl, { refreshToken });\r\n\r\n      const token = result.data.jwt;\r\n      localStorage.setItem(server.TOKEN_KEY, token);\r\n      return axios.request(error.config);\r\n    } else if (error.response.status == \"403\") {\r\n      // force logout\r\n      localStorage.removeItem(server.TOKEN_KEY);\r\n      localStorage.removeItem(server.REFRESH_TOKEN_KEY);\r\n    }\r\n\r\n    if (axios.isCancel(error)) {\r\n      return Promise.reject(error);\r\n    } else if (!error.response) {\r\n      alert(JSON.stringify(error));\r\n      return Promise.reject({\r\n        code: NOT_CONNECT_NETWORK,\r\n        message: NETWORK_CONNECTION_MESSAGE,\r\n      });\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const httpClient = axios;\r\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\fragments\\SelectSearch\\SelectSearch.js",["167","168"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport * as galleryActions from \"../../../actions/gallery.action\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport default () => {\n  const classes = useStyles();\n  const [type, setType] = useState();\n  const dispatch = useDispatch();\n\n  const handleType = (event) => {\n    setType(event.target.value);\n    dispatch(galleryActions.getGalleryByType(event.target.value));\n  };\n\n  return (\n    <FormControl className={classes.formControl}>\n      <InputLabel>Type</InputLabel>\n      <Select value={type} onChange={handleType} defaultValue=\"all\">\n        <MenuItem value=\"all\">All</MenuItem>\n        <MenuItem value=\"animal\">Animal</MenuItem>\n        <MenuItem value=\"view\">View</MenuItem>\n        <MenuItem value=\"people\">People</MenuItem>\n        <MenuItem value=\"meme\">Meme</MenuItem>\n      </Select>\n    </FormControl>\n  );\n};\n","C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\components\\fragments\\KeywordSearch\\KeywordSearch.js",[],"C:\\Users\\tanakorn.k\\Desktop\\gallery\\client\\src\\constants\\index.js",[],{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":34,"column":28,"nodeType":"175","messageId":"176","endLine":34,"endColumn":30},{"ruleId":"177","severity":1,"message":"178","line":1,"column":17,"nodeType":"179","messageId":"180","endLine":1,"endColumn":26},{"ruleId":"177","severity":1,"message":"181","line":1,"column":17,"nodeType":"179","messageId":"180","endLine":1,"endColumn":26},{"ruleId":"177","severity":1,"message":"182","line":5,"column":8,"nodeType":"179","messageId":"180","endLine":5,"endColumn":17},{"ruleId":"177","severity":1,"message":"183","line":17,"column":10,"nodeType":"179","messageId":"180","endLine":17,"endColumn":24},{"ruleId":"184","severity":1,"message":"185","line":35,"column":1,"nodeType":"186","endLine":184,"endColumn":3},{"ruleId":"177","severity":1,"message":"187","line":9,"column":3,"nodeType":"179","messageId":"180","endLine":9,"endColumn":7},{"ruleId":"177","severity":1,"message":"188","line":10,"column":3,"nodeType":"179","messageId":"180","endLine":10,"endColumn":11},{"ruleId":"177","severity":1,"message":"189","line":21,"column":7,"nodeType":"179","messageId":"180","endLine":21,"endColumn":18},{"ruleId":"177","severity":1,"message":"190","line":65,"column":25,"nodeType":"179","messageId":"180","endLine":65,"endColumn":35},{"ruleId":"177","severity":1,"message":"187","line":5,"column":10,"nodeType":"179","messageId":"180","endLine":5,"endColumn":14},{"ruleId":"177","severity":1,"message":"191","line":6,"column":8,"nodeType":"179","messageId":"180","endLine":6,"endColumn":18},{"ruleId":"177","severity":1,"message":"192","line":8,"column":8,"nodeType":"179","messageId":"180","endLine":8,"endColumn":13},{"ruleId":"177","severity":1,"message":"193","line":9,"column":8,"nodeType":"179","messageId":"180","endLine":9,"endColumn":15},{"ruleId":"177","severity":1,"message":"194","line":10,"column":8,"nodeType":"179","messageId":"180","endLine":10,"endColumn":16},{"ruleId":"177","severity":1,"message":"195","line":13,"column":8,"nodeType":"179","messageId":"180","endLine":13,"endColumn":20},{"ruleId":"177","severity":1,"message":"196","line":19,"column":8,"nodeType":"179","messageId":"180","endLine":19,"endColumn":20},{"ruleId":"177","severity":1,"message":"197","line":20,"column":8,"nodeType":"179","messageId":"180","endLine":20,"endColumn":21},{"ruleId":"177","severity":1,"message":"198","line":30,"column":3,"nodeType":"179","messageId":"180","endLine":30,"endColumn":9},{"ruleId":"177","severity":1,"message":"199","line":31,"column":3,"nodeType":"179","messageId":"180","endLine":31,"endColumn":9},{"ruleId":"177","severity":1,"message":"200","line":32,"column":3,"nodeType":"179","messageId":"180","endLine":32,"endColumn":16},{"ruleId":"177","severity":1,"message":"201","line":33,"column":3,"nodeType":"179","messageId":"180","endLine":33,"endColumn":14},{"ruleId":"177","severity":1,"message":"202","line":34,"column":3,"nodeType":"179","messageId":"180","endLine":34,"endColumn":16},{"ruleId":"177","severity":1,"message":"203","line":35,"column":3,"nodeType":"179","messageId":"180","endLine":35,"endColumn":20},{"ruleId":"177","severity":1,"message":"204","line":37,"column":3,"nodeType":"179","messageId":"180","endLine":37,"endColumn":10},{"ruleId":"177","severity":1,"message":"205","line":39,"column":10,"nodeType":"179","messageId":"180","endLine":39,"endColumn":14},{"ruleId":"177","severity":1,"message":"206","line":43,"column":7,"nodeType":"179","messageId":"180","endLine":43,"endColumn":21},{"ruleId":"184","severity":1,"message":"185","line":149,"column":1,"nodeType":"186","endLine":273,"endColumn":3},{"ruleId":"207","severity":1,"message":"208","line":159,"column":6,"nodeType":"209","endLine":159,"endColumn":8,"suggestions":"210"},{"ruleId":"177","severity":1,"message":"211","line":11,"column":8,"nodeType":"179","messageId":"180","endLine":11,"endColumn":14},{"ruleId":"177","severity":1,"message":"188","line":22,"column":8,"nodeType":"179","messageId":"180","endLine":22,"endColumn":16},{"ruleId":"177","severity":1,"message":"212","line":24,"column":8,"nodeType":"179","messageId":"180","endLine":24,"endColumn":19},{"ruleId":"177","severity":1,"message":"213","line":25,"column":8,"nodeType":"179","messageId":"180","endLine":25,"endColumn":18},{"ruleId":"184","severity":1,"message":"185","line":50,"column":1,"nodeType":"186","endLine":304,"endColumn":3},{"ruleId":"177","severity":1,"message":"214","line":55,"column":10,"nodeType":"179","messageId":"180","endLine":55,"endColumn":14},{"ruleId":"177","severity":1,"message":"215","line":63,"column":9,"nodeType":"179","messageId":"180","endLine":63,"endColumn":20},{"ruleId":"207","severity":1,"message":"216","line":72,"column":6,"nodeType":"209","endLine":72,"endColumn":8,"suggestions":"217"},{"ruleId":"177","severity":1,"message":"218","line":79,"column":9,"nodeType":"179","messageId":"180","endLine":79,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":168,"column":17,"nodeType":"221","endLine":168,"endColumn":34},{"ruleId":"222","severity":1,"message":"223","line":235,"column":14,"nodeType":"224","endLine":235,"endColumn":67},{"ruleId":"222","severity":1,"message":"223","line":238,"column":9,"nodeType":"224","endLine":241,"endColumn":11},{"ruleId":"177","severity":1,"message":"225","line":13,"column":13,"nodeType":"179","messageId":"180","endLine":13,"endColumn":16},{"ruleId":"177","severity":1,"message":"188","line":19,"column":8,"nodeType":"179","messageId":"180","endLine":19,"endColumn":16},{"ruleId":"177","severity":1,"message":"212","line":21,"column":8,"nodeType":"179","messageId":"180","endLine":21,"endColumn":19},{"ruleId":"177","severity":1,"message":"213","line":22,"column":8,"nodeType":"179","messageId":"180","endLine":22,"endColumn":18},{"ruleId":"184","severity":1,"message":"185","line":47,"column":1,"nodeType":"186","endLine":295,"endColumn":3},{"ruleId":"177","severity":1,"message":"214","line":50,"column":10,"nodeType":"179","messageId":"180","endLine":50,"endColumn":14},{"ruleId":"177","severity":1,"message":"218","line":67,"column":9,"nodeType":"179","messageId":"180","endLine":67,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":242,"column":14,"nodeType":"224","endLine":242,"endColumn":67},{"ruleId":"184","severity":1,"message":"185","line":79,"column":1,"nodeType":"186","endLine":237,"endColumn":3},{"ruleId":"207","severity":1,"message":"208","line":89,"column":6,"nodeType":"209","endLine":89,"endColumn":8,"suggestions":"226"},{"ruleId":"222","severity":1,"message":"223","line":114,"column":11,"nodeType":"224","endLine":117,"endColumn":13},{"ruleId":"184","severity":1,"message":"185","line":23,"column":1,"nodeType":"186","endLine":67,"endColumn":3},{"ruleId":"184","severity":1,"message":"185","line":14,"column":1,"nodeType":"186","endLine":27,"endColumn":3},{"ruleId":"184","severity":1,"message":"185","line":9,"column":1,"nodeType":"186","endLine":20,"endColumn":3},{"ruleId":"173","severity":1,"message":"174","line":32,"column":31,"nodeType":"175","messageId":"176","endLine":32,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":40,"column":38,"nodeType":"175","messageId":"176","endLine":40,"endColumn":40},{"ruleId":"177","severity":1,"message":"181","line":1,"column":27,"nodeType":"179","messageId":"180","endLine":1,"endColumn":36},{"ruleId":"184","severity":1,"message":"185","line":22,"column":1,"nodeType":"186","endLine":44,"endColumn":3},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'CardMedia' is defined but never used.","'CardActionArea' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Link' is defined but never used.","'MenuItem' is defined but never used.","'headersData' is assigned a value but never used.","'menuButton' is assigned a value but never used.","'DeleteIcon' is defined but never used.","'Paper' is defined but never used.","'Tooltip' is defined but never used.","'EditIcon' is defined but never used.","'NativeSelect' is defined but never used.","'SelectSearch' is defined but never used.","'KeywordSearch' is defined but never used.","'Button' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'Divider' is defined but never used.","'fade' is defined but never used.","'BootstrapInput' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["229"],"'Select' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'type' is assigned a value but never used.","'typeOptions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.match.params.id'. Either include them or remove the dependency array.",["230"],"'handleTypeChange' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Yup' is defined but never used.",["231"],"no-global-assign","no-unsafe-negation",{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"232","fix":"236"},"Update the dependencies array to be: [dispatch]",{"range":"237","text":"238"},"Update the dependencies array to be: [dispatch, props.match.params.id]",{"range":"239","text":"240"},{"range":"241","text":"238"},[3919,3921],"[dispatch]",[2295,2297],"[dispatch, props.match.params.id]",[2035,2037]]